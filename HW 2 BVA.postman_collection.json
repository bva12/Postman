{
	"info": {
		"_postman_id": "8a693c85-cf00-422d-ba0a-07115b9c72d3",
		"name": "HW 2 BVA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "autotests for API",
			"item": [
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Проверить, что в body приходит правильный string:\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5007/first",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5007",
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Спарсить response body в json:\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Спарсить request:\r",
									"let req = request.data;\r",
									"\r",
									"// Проверить, что name в ответе равно name s request (name вбить руками):\r",
									"pm.test(\"check name\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(\"Lera\");\r",
									"});\r",
									"\r",
									"// Проверить, что age в ответе равно age s request (age вбить руками):\r",
									"pm.test(\"check age\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(\"27\");\r",
									"});\r",
									"\r",
									"// Проверить, что salary в ответе равно salary s request (salary вбить руками):\r",
									"pm.test(\"check salary\", function () {\r",
									"    pm.expect(jsonData.salary).to.eql(1000);\r",
									"});\r",
									"\r",
									"// Проверить, что name в ответе равно name s request (name забрать из request):\r",
									"pm.test(\"check name using request body\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(req.name);\r",
									"});\r",
									"\r",
									"// Проверить, что age в ответе равно age s request (age забрать из request):\r",
									"pm.test(\"check age using request body\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(req.age);\r",
									"});\r",
									"\r",
									"// Проверить, что salary в ответе равно salary s request (salary забрать из request):\r",
									"pm.test(\"check salary using request body\", function () {\r",
									"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
									"});\r",
									"\r",
									"// Вывести в консоль параметр family из response:\r",
									"console.log(jsonData.family);\r",
									"\r",
									"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request):\r",
									"pm.test(\"check u_salary_1_5_year using request body\", function () {\r",
									"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req.salary * 4);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Lera",
									"type": "text"
								},
								{
									"key": "age",
									"value": "27",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5007/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5007",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Спарсить response body в json: \r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Спарсить request:\r",
									"let req = request.data;\r",
									"\r",
									"// Проверить, что json response имеет параметр start_qa_salary:\r",
									"pm.test(\"start_qa_salary property exists\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
									"});\r",
									"\r",
									"// Проверить, что json response имеет параметр qa_salary_after_6_months:\r",
									"pm.test(\"qa_salary_after_6_months property exists\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
									"});\r",
									"\r",
									"// Проверить, что json response имеет параметр qa_salary_after_12_months:\r",
									"pm.test(\"qa_salary_after_12_months property exists\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
									"});\r",
									"\r",
									"// Проверить, что json response имеет параметр qa_salary_after_1.5_year:\r",
									"pm.test(\"qa_salary_after_1.5_year property exists\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
									"});\r",
									"\r",
									"// Проверить, что json response имеет параметр qa_salary_after_3.5_years:\r",
									"pm.test(\"qa_salary_after_3.5_years property exists\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
									"});\r",
									"\r",
									"// Проверить, что json response имеет параметр person:\r",
									"pm.test(\"person property exists\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"person\");\r",
									"});\r",
									"\r",
									"// Проверить, что параметр start_qa_salary равен salary из request:\r",
									"pm.test(\"check start_qa_salary\", function () {\r",
									"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
									"});\r",
									"\r",
									"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request:\r",
									"pm.test(\"check qa_salary_after_6_months\", function () {\r",
									"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary * 2);\r",
									"});\r",
									"\r",
									"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request:\r",
									"pm.test(\"check qa_salary_after_12_months\", function () {\r",
									"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary * 2.7);\r",
									"});\r",
									"\r",
									"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request:\r",
									"pm.test(\"check qa_salary_after_1.5_year\", function () {\r",
									"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req.salary * 3.3);\r",
									"});\r",
									"\r",
									"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request:\r",
									"pm.test(\"check qa_salary_after_3.5_years\", function () {\r",
									"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req.salary * 3.8);\r",
									"});\r",
									"\r",
									"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request:\r",
									"pm.test(\"check salary\", function () {\r",
									"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);\r",
									"});\r",
									"\r",
									"// Проверить, что что параметр u_age равен age из request:\r",
									"pm.test(\"check age\", function () {\r",
									"    pm.expect(jsonData.person.u_age).to.eql(+req.age);\r",
									"});\r",
									"\r",
									"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request:\r",
									"pm.test(\"check u_salary_5_years\", function () {\r",
									"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary * 4.2);\r",
									"});\r",
									"\r",
									"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person:\r",
									"for (var key in jsonData.person) {\r",
									"    console.log(key, jsonData.person[key])\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Lera",
									"type": "text"
								},
								{
									"key": "age",
									"value": "27",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5007/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5007",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Спарсить response body в json:\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Спарсить request:\r",
									"let req = pm.request.url.query.all();\r",
									"\r",
									"// Проверить, что name в ответе равно name s request (name забрать из request):\r",
									"pm.test(\"check name\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(req[0].value);\r",
									"});\r",
									"\r",
									"// Проверить, что age в ответе равно age s request (age забрать из request):\r",
									"pm.test(\"check age\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(req[1].value);\r",
									"});\r",
									"\r",
									"// Проверить, что salary в ответе равно salary s request (salary забрать из request):\r",
									"pm.test(\"check salary\", function () {\r",
									"    pm.expect(jsonData.salary).to.eql(+req[2].value);\r",
									"});\r",
									"\r",
									"// Вывести в консоль параметр family из response:\r",
									"console.log(jsonData.family);\r",
									"\r",
									"// Проверить, что у параметра dog есть параметры name:\r",
									"pm.test(\"dog's name property exists\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
									"});\r",
									"\r",
									"//  Проверить, что у параметра dog есть параметры age:\r",
									"pm.test(\"dog's age property exists\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog).to.have.property('age');\r",
									"});\r",
									"\r",
									"// Проверить, что параметр name имеет значение Luky:\r",
									"pm.test(\"check dog's name\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
									"});\r",
									"\r",
									"// Проверить, что параметр age имеет значение 4:\r",
									"pm.test(\"check dog's age\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5007/object_info_3?name=Dasha&age=34&salary=2000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5007",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Dasha"
								},
								{
									"key": "age",
									"value": "34"
								},
								{
									"key": "salary",
									"value": "2000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Спарсить response body в json:\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"// Спарсить request:\r",
									"let req = pm.request.url.query.all();\r",
									"\r",
									"// Проверить, что name в ответе равно name из request (name забрать из request):\r",
									"pm.test(\"check name\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(req[0].value);\r",
									"});\r",
									"\r",
									"// Проверить, что age в ответе равно age из request (age забрать из request):\r",
									"pm.test(\"check age\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(+req[1].value);\r",
									"});\r",
									"\r",
									"// Вывести в консоль параметр salary из request:\r",
									"console.log(req[2].value);\r",
									"\r",
									"// Вывести в консоль параметр salary из response:\r",
									"console.log(jsonData.salary);\r",
									"\r",
									"// Вывести в консоль 0-й элемент параметра salary из response:\r",
									"console.log(jsonData.salary[0]);\r",
									"\r",
									"// Вывести в консоль 1-й элемент параметра salary параметр salary из response:\r",
									"console.log(jsonData.salary[1]);\r",
									"\r",
									"// Вывести в консоль 2-й элемент параметра salary параметр salary из response:\r",
									"console.log(jsonData.salary[2]);\r",
									"\r",
									"\r",
									"// Проверить, что 0-й элемент параметра salary равен salary из request:\r",
									"pm.test(\"check salary 1\", function () {\r",
									"    pm.expect(jsonData.salary[0]).to.eql(+req[2].value);\r",
									"});\r",
									"\r",
									"// Проверить, что 1-й элемент параметра salary равен salary*2 из request:\r",
									"pm.test(\"check salary 2\", function () {\r",
									"    pm.expect(jsonData.salary[1]).to.eql(req[2].value * 2);\r",
									"});\r",
									"\r",
									"// Проверить, что 2-й элемент параметра salary равен salary*3 из request:\r",
									"pm.test(\"check salary 3\", function () {\r",
									"    pm.expect(jsonData.salary[2]).to.eql(req[2].value * 3);\r",
									"});\r",
									"\r",
									"let user_name = jsonData.name;\r",
									"let user_age = jsonData.age;\r",
									"let user_salary = jsonData.salary[0];\r",
									"\r",
									"// Передать в окружение переменные name, age, salary:\r",
									"pm.environment.set(\"name\", user_name);\r",
									"pm.environment.set(\"age\", user_age);\r",
									"pm.environment.set(\"salary\", user_salary);\r",
									"\r",
									"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary:\r",
									"jsonData.salary.forEach((elem) => console.log(elem));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5007/object_info_4?name=Lera&age=27&salary=1000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5007",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Lera"
								},
								{
									"key": "age",
									"value": "27"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}